#!/bin/sh
. /lib/functions.sh

# wifi button for qca
# this script will cover the common script of wireless-button packge.

state="off"

#set soft_state on when wifi soft swich status of any band on
soft_state="off"
#set old_soft_state on when last wifi soft swich status of any band on
old_soft_state="off"

#uci commit flag
need_commit=0

wireless_schedule_state_reset() {
    uci_toggle_state wireless_schedule 2g_disable "" 0
    uci_toggle_state wireless_schedule 5g_disable "" 0
}

wifi_get_soft_state() {
    local enable
    local lastenable
    local mode
    local guest
    local iface="$1"

    config_get_bool enable $1 enable
    config_get_bool lastenable $1 lastenable
    config_get mode $1 mode
    config_get guest $1 guest
    if [ "$mode" = "ap" -a -z "$guest" ]; then
        if [ "$enable" = "1" ]; then
            soft_state="on"
        fi

        if [ "$lastenable" = "1" ]; then
            old_soft_state="on"
        fi
    fi
}

wifi_set_led() {
    local band="$1"
    local ledstatus="$2"
    local ledtype=""

    if [ "$band" = "2g" ]; then
        ledtype="WIFI2G"
    elif [ "$band" = "5g" ]; then
        ledtype="WIFI5G"
    elif [ "$band" = "5g_2" ]; then
        ledtype="WIFI5G_2"
    elif [ "$band" = "wps" ]; then
        ledtype=" WPS"
    fi

    if [ -n "$ledtype" -a -n "$ledstatus" ]; then
        if [ "$ledstatus" = "on" ]; then
            ledcli "${ledtype}_ON"
        else
            ledcli "${ledtype}_OFF"
        fi
    fi
}

wifi_log_band_state() {
    local iface="$1"
    local dev="$2"
    local value="$3"
    local band
    local tmp_s

    config_get mode $iface mode
    config_get guest $iface guest
    config_get device $iface device
    if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
        config_get enable $iface enable
        config_get band $dev band

        if [ "$value" != "on" ]; then
            tmp_s="OFF"
        else
            if [ "$enable" = "on" ]; then
                tmp_s="ON"
            else
                tmp_s="OFF"
            fi
        fi
        if [ "$band" = "2g" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "2.4G" "$tmp_s"
        elif [ "$band" = "5g" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "5G" "$tmp_s"
        elif [ "$band" = "5g_2" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "5G_2" "$tmp_s"
        fi
    fi
}

wifi_set_all_soft_state() {
    local enable
    local lastenable
    local mode
    local guest
    local band
    local device
    local tmp_s
    local iface="$1"
    local dev="$2"
    local value="$3"

    config_get enable $iface enable
    config_get lastenable $iface lastenable
    config_get mode $iface mode
    config_get guest $iface guest
    config_get device $iface device
    if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
        if [ "$value" != "on" ]; then
            value="off"
            tmp_s="OFF"
        else
            tmp_s="ON"
        fi

        config_get band $dev band

        if [ "$enable" != "$value" ]; then
            uci set wireless.$iface.enable="$value"
            uci set wireless.$dev.disabled_all="$enable"
            need_commit=1
        fi
        if [ "$lastenable" != "$enable" ]; then
            uci set wireless.$iface.lastenable="$enable"
            need_commit=1
        fi

        # log the band state
        if [ "$band" = "2g" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "2.4G" "$tmp_s"
        elif [ "$band" = "5g" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "5G" "$tmp_s"
        elif [ "$band" = "5g_2" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "5G_2" "$tmp_s"
        fi

        wifi_set_led "$band" "$value"
    fi
}

wifi_restore_soft_state() {
    local enable
    local lastenable
    local mode
    local guest
    local band
    local tmp_s
    local iface="$1"
    local dev="$2"

    config_get enable $iface enable
    config_get lastenable $iface lastenable
    config_get mode $iface mode
    config_get guest $iface guest
    config_get device $iface device
    if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
        config_get band $dev band

        if [ -z "$lastenable" ]; then
            lastenable="off"
        fi

        if [ "$enable" != "$lastenable" ]; then
            uci set wireless.$iface.enable="$lastenable"
            uci set wireless.$dev.disabled_all="$enable"
            need_commit=1
        fi

        # log the band state
        if [ "$lastenable" != "on" ]; then
            tmp_s="OFF"
        else
            tmp_s="ON"
        fi
        if [ "$band" = "2g" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "2.4G" "$tmp_s"
        elif [ "$band" = "5g" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "5G" "$tmp_s"
        elif [ "$band" = "5g_2" ]; then
            logwrite $$ wireless WIRELESS_SWITCH_SET "5G_2" "$tmp_s"
        fi

        wifi_set_led "$band" "$lastenable"
    fi
}

wifi_state_obtain() {
    local disabled
    local dev="$1"
    config_get_bool disabled $1 disabled
    if [ "$soft_state" = "on" ]; then
        if [ "$disabled" = "0" ]; then
            state="on"
            [ -f /usr/bin/ledctrl ] && {
                ledcli WIFI2G_OFF
                ledcli WIFI5G_OFF
                ledcli WPS_OFF
            }
            # log the band state
            config_foreach wifi_log_band_state wifi-iface "$dev" "off"
        else
            [ -f /usr/bin/ledctrl ] && {
                ledcli WIFI2G_ON
                ledcli WIFI5G_ON
            }
            # log the band state
            config_foreach wifi_log_band_state wifi-iface "$dev" "on"
        fi
    else
        # if the old soft swich status all closed, set it open
        if [ "$old_soft_state" != "on" ]; then
            config_foreach wifi_set_all_soft_state wifi-iface "$dev" "on"
        else
            config_foreach wifi_restore_soft_state wifi-iface "$dev"
        fi

    fi
}

wifi_state_set() {
    local dev="$1"
    uci set wireless.$dev.disabled=$state
    if [ "$state" == "on" ]
    then
        uci set wireless.$dev.disabled_by="0"
    fi
    need_commit=1
}

# log the button action
logwrite $$ wireless WIRELESS_BUTTON_SET "pressed"

is_factory_mode(){
    uci get factory.factorymode.enable
}

send_to_son()
{
    local staname1
    local staname2
    local ret
    local pattern
    local count
    [ -r /var/run/son.conf ] || return 0
    staname1=$(grep sta /var/run/son.conf | head -n 1 | cut -f3 -d" " )
    staname2=$(grep sta /var/run/son.conf | tail -n 1 | cut -f3 -d" " )
    echo "$staname1 $staname2"
    count=0
    pattern="Not-Associated"
    for sta in $staname1 $staname2;do
        result=$(iwconfig $sta | head -2 | tail -1 | grep -o "Not-Associated")
        if [ $result == $pattern ];then
           count=$((count+1))
        fi
    done
    if [ $count -lt 2 ];then
        echo "Sending to son"
        echo "wps_pbc $SEEN" > /var/run/sonwps.pipe &
        touch /var/run/son_active
        ret=1
    else
        ret=0
        echo "Son not processing push - sta not connected"
    fi
    return $ret
}

restrict_pbc_for_sta_iface() {
	local config=$1
	local ifname
	config_get ifname "$config" ifname
	local wps_pbc_skip
	config_get wps_pbc_skip "$config" wps_pbc_skip 0
	local mode
	config_get mode "$config" mode

	config_get MapBSSType "$config" MapBSSType
	config_get map "$config" map

	# MapBSSType 128, vap is backhaul STA
	if [ $MapBSSType -eq 128 ]; then
		multi_ap=$map
	fi


	if ([ $wps_pbc_skip -eq 0 ] && [ "$dir" = "/var/run/wpa_supplicant-$ifname" ]) ||
	   ([ $mode == "sta" ] && iwconfig $ifname | head -2 | tail -1 | grep -q "Not-Associated" ); then
		wpa_cli -p "$dir" wps_pbc multi_ap=$multi_ap
		echo "wpa_cli -p $dir wps_pbc multi_ap=$multi_ap" > /dev/console
		[ -f $pid ] || {
			wpa_cli -p"$dir" -a/lib/wifi/wps-supplicant-update-uci -P$pid -B
		}
	fi
}

trigger_pbc(){
    echo "" > /dev/console
    echo "WPS PUSH BUTTON EVENT DETECTED" > /dev/console
    # cleanup old file
    rm -f /var/run/son_active
    #check for son.conf - if not there exit
    # ret is 1 if push is consumed by son , if ret == 0 continue to next scripts
    send_to_son
    ret=$?
    [ $ret -eq 1 ] && exit 0

    # Son did not process the push call wps-extender if confgured
    # If multi node wps is enabled then wps-extender will not process the push.
    if [ -r /var/run/wifi-wps-enhc-extn.conf ] && [ ! -r /var/run/son.conf ]; then
        exit 0
    fi

    # son and wps_extender are not processing the push
    if [ "$(uci get meshd.meshd.enable)" == "on" -a "$(uci get meshd.meshd.role)" == "agent" ]; then
        config_load wireless
        for dir in /var/run/wpa_supplicant-*; do
            [ -d "$dir" ] || continue
            pid=/var/run/wps-hotplug-${dir#"/var/run/wpa_supplicant-"}.pid
            config_foreach restrict_pbc_for_sta_iface wifi-iface
        done
    else
        for dir in /var/run/hostapd-*; do
            [ -d "$dir" ] || continue
            for vap_dir in $dir/ath* $dir/wlan*; do
                [ -r "$vap_dir" ] || continue
                nopbn=`iwpriv "${vap_dir#"$dir/"}" get_nopbn | cut -d':' -f2`
                if [ $nopbn != 1 ]; then
                    hostapd_cli -i "${vap_dir#"$dir/"}" -p "$dir" wps_pbc
                fi
            done
        done
    fi
}

check() {
    if [ "$(is_factory_mode)" = "yes" ]; then
        echo "wifi button will lose function now!" >/dev/console
        if [ ! -e /tmp/btn_check ];then
            echo 0 > /tmp/btn_check
        fi
        ret=$(cat /tmp/btn_check)
        ret=$(($ret | 0x2))
        echo $ret > /tmp/btn_check
    elif [ $SEEN -ge 2 ]; then
        echo "Wifi Button trigger detect!" >/dev/console
        config_load sysmode
        config_get sysmode sysmode mode "router"
        local role=$(uci get meshd.meshd.role)
        [ "$role" = "agent" ] && exit 0

        config_load wireless
        config_foreach wifi_get_soft_state wifi-iface
        config_foreach wifi_state_obtain wifi-device
        config_foreach wifi_state_set wifi-device
        wireless_schedule_state_reset

        if [ $need_commit -eq 1 ]; then
            wifi_commit
        fi

        local support_onemesh=$(uci get profile.@onemesh[0].onemesh_support -c "/etc/profile.d" -q)
        if [ "$support_onemesh" = "yes" -a "$sysmode" = "router" ]; then
            lua -e 'require("luci.controller.admin.onemesh").sync_wifi_all()'
        fi
        ubus call map wifi_reload

        wifi reload
    else
        local share_btn=$(uci get profile.@wireless[0].share_btn_wifi_wps -c "/etc/profile.d" -q)
        if [ "$share_btn" = "yes" ]; then
            trigger_pbc
        fi
    fi
}

pid=
[ "$ACTION" = "released" -a "$BUTTON" = "wifi" ] && check
